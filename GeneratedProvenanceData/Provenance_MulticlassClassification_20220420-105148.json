{
  "prefix": {
    "prov_1": "http://www.w3.org/ns/prov",
    "experimentinfo": "experimentinfo.org",
    "hardwareinfo": "hardwareinfo.org",
    "packages": "packages.org",
    "dataingestion": "dataingestion.org",
    "datapreparation": "datapreparation.org",
    "datasegregation": "datasegregation.org",
    "modelparameters": "modelparameters.org",
    "training": "training.org",
    "evaluation": "evaluation.org",
    "default": "provenanceexample.org"
  },
  "agent": {
    "Tarek Al Mustafa": [
      {
        "prov:email": "tarek.almustafa@uni-jena.de"
      },
      {}
    ]
  },
  "entity": {
    "prov:notebook": {
      "prov:programming_language": "Python",
      "prov:programming_language_version": "3.9.7.final.0 (64 bit)",
      "prov:kernel": "python3",
      "prov:type": [
        "prov:Plan",
        "prov:Collection"
      ]
    },
    "experiment_info": {
      "experimentinfo:title": "Multiclass Classification",
      "experimentinfo:creation_date": "2022-04-20",
      "experimentinfo:task_type": "MulticlassClassification"
    },
    "hardware_info": {
      "hardwareinfo:Python Version": "3.9.7.final.0 (64 bit)",
      "hardwareinfo:CPU": "AMD Ryzen 7 3700X 8-Core Processor",
      "hardwareinfo:RAM": "15.95GB",
      "hardwareinfo:Operating System": "Windows 10 Version: 10.0.19044 Machine: AMD64",
      "hardwareinfo:GPUs": "[(0, 'NVIDIA GeForce GTX 1060 6GB')]"
    },
    "packages": {
      "packages:numpy": "1.22.2",
      "packages:pandas": "1.3.3",
      "packages:matplotlib": "3.5.1",
      "packages:sklearn": "1.0.2",
      "packages:torch": "1.10.2+cpu",
      "packages:tqdm": "4.60.0",
      "packages:ipywidgets": "7.6.5",
      "packages:pytorch-model-summary": "pytorch-model-summary         0.1.2",
      "packages:ipython": "7.31.1",
      "packages:gputil": "1.4.0",
      "packages:psutil": "5.9.0",
      "packages:py-cpuinfo": "py-cpuinfo                    8.0.0",
      "packages:prov": "2.0.0"
    },
    "data_ingestion": {
      "dataingestion:dataset_id": "Iris",
      "dataingestion:output_dimensions": {
        "$": 3,
        "type": "xsd:int"
      },
      "dataingestion:samples_total": {
        "$": 150,
        "type": "xsd:int"
      },
      "dataingestion:feature_dimensions": {
        "$": 4,
        "type": "xsd:int"
      }
    },
    "data_preparation": {
      "datapreparation:number_operations": {
        "$": 1,
        "type": "xsd:int"
      },
      "datapreparation:transformation": "sklearn.preprocessing.StandardScaler",
      "datapreparation:transformation_method": "Standardscaler.fit_transform"
    },
    "data_segregation": {
      "datasegregation:segregation_method": "sklearn.model_selection.train_test_split",
      "datasegregation:test_size": {
        "$": 0.2,
        "type": "xsd:double"
      },
      "datasegregation:train_size": {
        "$": 0.8,
        "type": "xsd:double"
      },
      "datasegregation:random_state": {
        "$": 2,
        "type": "xsd:int"
      }
    },
    "model_parameters": {
      "modelparameters:gpu_enable": {
        "$": 1,
        "type": "xsd:int"
      },
      "modelparameters:modelParameters": "str(model)TODO",
      "modelparameters:neuron_number": {
        "$": 50,
        "type": "xsd:int"
      },
      "modelparameters:loss_function": "nn.CrossEntropyLoss()",
      "modelparameters:optimizer": "torch.optim.Adam(",
      "modelparameters:optimizer_default_learning_rate": {
        "$": 1,
        "type": "xsd:int"
      },
      "modelparameters:optimizer_learning_rate": "None",
      "modelparameters:activation_function": "F.softmax(self.layer3(x), dim=1)"
    },
    "training": {
      "training:epochs": {
        "$": 100,
        "type": "xsd:int"
      },
      "training:numberOfParameters": {
        "$": 2953,
        "type": "xsd:int"
      }
    },
    "evaluation": {
      "evaluation:Accuracy": 0.9333333373069763,
      "evaluation:Loss": 0.6612025499343872,
      "evaluation:Confusion Matrix": "[[13  1  0]\n [ 0  7  1]\n [ 0  0  8]]",
      "evaluation:AUC": {
        "$": 0.99167,
        "type": "xsd:double"
      },
      "evaluation:F1 Score": "[0.96296296 0.875      0.94117647]",
      "evaluation:Mean Absolute Error": 0.06666666666666667,
      "evaluation:Mean Squared Error": 0.06666666666666667
    }
  },
  "wasAttributedTo": {
    "_:id1": {
      "prov:entity": "prov:notebook",
      "prov:agent": "Tarek Al Mustafa"
    }
  },
  "activity": {
    "set_experiment_info()": {
      "prov:startTime": "2022-04-20T10:51:43.413727"
    },
    "date.today()": {},
    "set_hardware_info()": {
      "prov:startTime": "2022-04-20T10:51:46.113175"
    },
    "platform.uname()": {},
    "cpuinfo.get_cpu_info()": {},
    "svmem.total": {},
    "get_size(svmem.total)": {},
    "GPUtil.getGPUs()": {},
    "set_packages()": {
      "prov:startTime": "2022-04-20T10:51:47.896797"
    },
    "{package_name}.__version__": {},
    "!pip list | grep -i py-cpuinfo": {},
    "!pip list | grep -i pytorch-model-summary": {},
    "set_data_ingestion()": {
      "prov:startTime": "2022-04-20T10:51:47.922821"
    },
    "set_data_preparation()": {
      "prov:startTime": "2022-04-20T10:51:47.936833"
    },
    "set_data_segregation()": {
      "prov:startTime": "2022-04-20T10:51:47.952848"
    },
    "set_model_parameters()": {
      "prov:startTime": "2022-04-20T10:51:48.210253"
    },
    "set_training()": {
      "prov:startTime": "2022-04-20T10:51:48.329360"
    },
    "hierarchical_summary(model, print_summary = False)[1]": {},
    "set_evaluation()": {
      "prov:startTime": "2022-04-20T10:51:48.553564"
    }
  },
  "wasAssociatedWith": {
    "_:id2": {
      "prov:activity": "set_experiment_info()",
      "prov:agent": "Tarek Al Mustafa",
      "prov:plan": "prov:notebook"
    },
    "_:id13": {
      "prov:activity": "set_hardware_info()",
      "prov:agent": "Tarek Al Mustafa",
      "prov:plan": "prov:notebook"
    },
    "_:id19": {
      "prov:activity": "set_packages()",
      "prov:agent": "Tarek Al Mustafa",
      "prov:plan": "prov:notebook"
    },
    "_:id22": {
      "prov:activity": "set_data_ingestion()",
      "prov:agent": "Tarek Al Mustafa",
      "prov:plan": "prov:notebook"
    },
    "_:id26": {
      "prov:activity": "set_data_preparation()",
      "prov:agent": "Tarek Al Mustafa",
      "prov:plan": "prov:notebook"
    },
    "_:id30": {
      "prov:activity": "set_data_segregation()",
      "prov:agent": "Tarek Al Mustafa",
      "prov:plan": "prov:notebook"
    },
    "_:id34": {
      "prov:activity": "set_model_parameters()",
      "prov:agent": "Tarek Al Mustafa",
      "prov:plan": "prov:notebook"
    },
    "_:id39": {
      "prov:activity": "set_training()",
      "prov:agent": "Tarek Al Mustafa",
      "prov:plan": "prov:notebook"
    },
    "_:id43": {
      "prov:activity": "set_evaluation()",
      "prov:agent": "Tarek Al Mustafa",
      "prov:plan": "prov:notebook"
    }
  },
  "wasGeneratedBy": {
    "_:id3": {
      "prov:entity": "experiment_info",
      "prov:activity": "set_experiment_info()"
    },
    "_:id6": {
      "prov:entity": "hardware_info",
      "prov:activity": "set_hardware_info()"
    },
    "_:id14": {
      "prov:entity": "packages",
      "prov:activity": "set_packages()"
    },
    "_:id20": {
      "prov:entity": "data_ingestion",
      "prov:activity": "set_data_ingestion()"
    },
    "_:id23": {
      "prov:entity": "data_preparation",
      "prov:activity": "set_data_preparation()"
    },
    "_:id27": {
      "prov:entity": "data_segregation",
      "prov:activity": "set_data_segregation()"
    },
    "_:id31": {
      "prov:entity": "model_parameters",
      "prov:activity": "set_model_parameters()"
    },
    "_:id35": {
      "prov:entity": "training",
      "prov:activity": "set_training()"
    },
    "_:id40": {
      "prov:entity": "evaluation",
      "prov:activity": "set_evaluation()"
    }
  },
  "wasInformedBy": {
    "_:id4": {
      "prov:informed": "set_experiment_info()",
      "prov:informant": "date.today()"
    },
    "_:id7": {
      "prov:informed": "set_hardware_info()",
      "prov:informant": "platform.uname()"
    },
    "_:id8": {
      "prov:informed": "set_hardware_info()",
      "prov:informant": "cpuinfo.get_cpu_info()"
    },
    "_:id9": {
      "prov:informed": "set_hardware_info()",
      "prov:informant": "svmem.total"
    },
    "_:id10": {
      "prov:informed": "svmem.total",
      "prov:informant": "get_size(svmem.total)"
    },
    "_:id11": {
      "prov:informed": "set_hardware_info()",
      "prov:informant": "GPUtil.getGPUs()"
    },
    "_:id15": {
      "prov:informed": "set_packages()",
      "prov:informant": "{package_name}.__version__"
    },
    "_:id16": {
      "prov:informed": "set_packages()",
      "prov:informant": "!pip list | grep -i py-cpuinfo"
    },
    "_:id17": {
      "prov:informed": "set_packages()",
      "prov:informant": "!pip list | grep -i pytorch-model-summary"
    },
    "_:id36": {
      "prov:informed": "set_training()",
      "prov:informant": "hierarchical_summary(model, print_summary = False)[1]"
    }
  },
  "hadMember": {
    "_:id5": {
      "prov:collection": "prov:notebook",
      "prov:entity": "experiment_info"
    },
    "_:id12": {
      "prov:collection": "prov:notebook",
      "prov:entity": "hardware_info"
    },
    "_:id18": {
      "prov:collection": "prov:notebook",
      "prov:entity": "packages"
    },
    "_:id21": {
      "prov:collection": "prov:notebook",
      "prov:entity": "data_ingestion"
    },
    "_:id25": {
      "prov:collection": "prov:notebook",
      "prov:entity": "data_preparation"
    },
    "_:id29": {
      "prov:collection": "prov:notebook",
      "prov:entity": "data_segregation"
    },
    "_:id33": {
      "prov:collection": "prov:notebook",
      "prov:entity": "model_parameters"
    },
    "_:id38": {
      "prov:collection": "prov:notebook",
      "prov:entity": "training"
    },
    "_:id42": {
      "prov:collection": "prov:notebook",
      "prov:entity": "evaluation"
    }
  },
  "used": {
    "_:id24": {
      "prov:activity": "set_data_preparation()",
      "prov:entity": "data_ingestion"
    },
    "_:id28": {
      "prov:activity": "set_data_segregation()",
      "prov:entity": "data_preparation"
    },
    "_:id32": {
      "prov:activity": "set_model_parameters()",
      "prov:entity": "data_segregation"
    },
    "_:id37": {
      "prov:activity": "set_training()",
      "prov:entity": "model_parameters"
    },
    "_:id41": {
      "prov:activity": "set_evaluation()",
      "prov:entity": "training"
    }
  }
}